{"version":3,"sources":["Header.js","DisplayWeather.js","Footer.js","App.js","index.js"],"names":["Header","todayOffset","offset","result","Date","setDate","getDate","react_default","a","createElement","className","action","htmlFor","type","id","placeholder","value","this","props","locationName","onChange","handleLocation","entry_default","handleChange1","time1","format","maxDate","minDate","required","handleChange2","time2","onClick","kickOff","Component","DisplayWeather","getTimefromDate","dateTime","hours","getHours","minutes","getMinutes","concat","time","src","icon","alt","summary","Math","round","temperature","apparentTemp","precipProbability","precipIntensity","humidity","windSpeed","Footer","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todaysDate","dateObject","year","getFullYear","month","getMonth","day","setState","event","target","e","preventDefault","formattedTime1","formatDate","state","formattedTime2","getCityCoordinate","getWeatherData","date","weatherName","console","log","axios","url","latt","long","then","response","data","defineProperty","currently","assignStates","refToWeather","current","window","scrollTo","offsetTop","address","method","params","q","addressdetails","limit","lat","lon","catch","error","message","getCityNameFromCoordinates","city","objectName","newData","apparentTemperature","serverTime","readableDate","displayRainMessage","weatherData1","weatherData2","max","unixTime","suffix","toString","endsWith","substr","getLocationInfo","position","coords","longitude","latitude","React","createRef","parsedweatherData1","parsedweatherData2","counter","navigator","geolocation","getCurrentPosition","src_Header","ref","src_DisplayWeather","location","reload","src_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.967e947a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DateTimePicker from 'react-datetime-picker';\n\nclass Header extends Component {\n\n    //add or subtract days from today to use on maxDate and minDate props of DateTimePicker component.\n    todayOffset = (offset) => {\n        //create a new weather object with todays date\n        let result = new Date();\n        result.setDate(result.getDate() + offset);\n        return result;\n    }\n    render() {\n        return (\n            <div className=\"header\">\n                <div className=\"wrapper formBox\">\n                    <h1>Commuter.Weather</h1>\n                    <p>Tell us when your commute is, we'll tell you how the weather will be.</p>\n                    <form action=\"\">\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"location\">City:</label>\n                            <input \n                            className = \"textInput\"\n                            type=\"text\" \n                            id=\"location\"\n                            placeholder={\"enter city name\"}\n                            value={this.props.locationName}\n                            onChange={this.props.handleLocation}\n                            />\n                        </div>\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"time1\">Commute to Work Start Time:</label>\n                            <DateTimePicker\n                                className=\"datePicker\"\n                                onChange={this.props.handleChange1}\n                                value={this.props.time1}\n                                format=\"y-MM-dd HH:mm\"\n                                // make sure user can only select yesterday to a week out\n                                maxDate={this.todayOffset(7)}\n                                minDate={this.todayOffset(-1)}\n                                required={true}\n                            />\n                        </div>\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"time2\">Commute to Home Start Time:</label>\n                            <DateTimePicker\n                                className=\"datePicker\"\n                                onChange={this.props.handleChange2}\n                                value={this.props.time2}\n                                format=\"y-MM-dd HH:mm\"\n                                // make sure user can only select yesterday to a week out\n                                maxDate={this.todayOffset(7)}\n                                minDate={this.todayOffset(-1)}\n                                required={true}\n                            />\n                        </div>\n                        {/* error handling: check if the user has values for both dates */}\n                        <button onClick={(this.props.time1 && this.props.time1) ? this.props.kickOff : \"\"}\n                            className=\"greenButton\"\n                        >Display Weather\n                        </button>\n                    </form>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass DisplayWeather extends Component {\n    getTimefromDate = (dateTime) => {\n        let hours = dateTime.getHours();\n        if (hours < 10) {\n            hours = '0' + hours;\n        }\n        let minutes = dateTime.getMinutes();\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        let timeString = `${hours}:${minutes}`;\n        return timeString\n    }\n    \n\n    render(){\n        return(\n            <div className=\"weatherResult\">\n                <h2>Weather forecast for <span className=\"bold\">{this.getTimefromDate(this.props.time)}</span></h2>\n                <div className=\"weatherData\">\n                    <div className=\"importantData\">\n                        <div className=\"iconContainer\">\n                            <img src={`./assets/weatherIcons/${this.props.icon}.svg`} alt={`${this.props.icon} icon`}/>\n                        </div>\n                        <h3>{this.props.summary}</h3>\n                        <div className=\"temperature\">\n                        <h3>{Math.round(this.props.temperature)} {'\\u00b0'} C</h3>\n                        </div>\n                    </div>\n                    <div className=\"extraData\">\n                        <div className=\"apparentTemp numberItem\">\n                            <h4>Feels like:</h4>\n                            <p>{Math.round(this.props.apparentTemp)} {'\\u00b0'} C</p>\n                        </div>\n                        <div className=\"precipProbability numberItem\">\n                            <h4>Chance of Precipitation: </h4>\n                            <p>{`${Math.round(this.props.precipProbability*100)}%`}</p>\n                        </div>\n                        <div className=\"precipIntensity numberItem\">\n                            <h4>Precipitation: </h4>\n                            <p>{`${Math.round(this.props.precipIntensity*100)/100} mm/hr`}</p>\n                        </div>\n                        <div className=\"humidity numberItem\">\n                            <h4>Humiditiy:</h4>\n                            <p>{`${Math.round(this.props.humidity * 100)} %`}</p>\n                        </div>\n                        <div className=\"windSpeed numberItem\">\n                            <h4>Wind:</h4>\n                            <p>{`${Math.round(this.props.windSpeed * 3600/1000)} km/hr`}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DisplayWeather;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div className=\"wrapper\">\n                    <a href=\"https://darksky.net/poweredby/\"> Powered by Dark Sky API </a>\n                    <p> Built by Can Rozanes </p>\n                    <a href=\"https://www.iconfinder.com/iconsets/weather-color-2\"> Weather Icons by Yun Liu</a>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from './Header.js';\nimport DisplayWeather from './DisplayWeather.js';\nimport Footer from './Footer.js'\n\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t//create a reference to the weatherData component for automatic scrolling\n\t\tthis.refToWeather = React.createRef();\n\t\tthis.state = {\n\t\t\ttime1: this.todaysDate(),\n\t\t\ttime2: this.todaysDate(),\n\t\t\tformattedTime1: \"\",\n\t\t\tformattedTime2: \"\",\n\t\t\tparsedweatherData1: {},\n\t\t\tparsedweatherData2: {},\n\t\t\tlocationName: \"\",\n\t\t\tcounter: 0,\n\t\t\tlatt: \"\",\n\t\t\tlong: \"\",\n\t\t\trefToWeather: \"\",\n\t\t\terror: null,\n\t\t}\n\t}\n\t//take todays date reformated it and create a new date object to set the initial state of time1 and time2 states to be nice round datetimes. \n\ttodaysDate = ()       => {\n\t\tlet dateObject = new Date();\n\t\tlet year = dateObject.getFullYear();\n\t\tlet month = dateObject.getMonth() + 1;\n\t\tif (month < 10) {\n\t\t\tmonth = '0' + month;\n\t\t}\n\t\tlet day = dateObject.getDate();\n\t\tif (day < 10) {\n\t\t\tday = '0' + day;\n\t\t}\n\t\tlet hours = dateObject.getHours();\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tlet minutes = dateObject.getMinutes();\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\treturn new Date(`${year}-${month}-${day}T${hours}:00:00`);\n\t}\n\t//handle change for the first dateTime picker\n\thandleChange1 = (time) => {\n\t\tthis.setState({ time1: time })\n\t}\n\t//handle change for the second dateTime picker\n\thandleChange2 = (time) => {\n\t\tthis.setState({ time2: time })\n\t}\n\thandleLocation = (event) =>{\n\t\tthis.setState({\n\t\t\tlocationName: event.target.value,\n\t\t})\n\t\t\n\t}\n\t//when user presses the \"Display Weather\" button, call the formatDate function with \"weatherData1\" and \"weatherData2\" strings.\n\tkickOff = (e) => {\n\t\t//prevent default behaviour of the button\n\t\te.preventDefault();\n\t\t//call format date for two different dates. Also pass in strings that will eventually be the name of the objects that will store the results of the each API call.\n\t\tthis.setState({\n\t\t\tformattedTime1 : this.formatDate(this.state.time1),\n\t\t\tformattedTime2 : this.formatDate(this.state.time2),\n\t\t})\n\t\tthis.getCityCoordinate(this.state.locationName);\n\t}\n\t//format the date from a date object to a string format that is accepted by the API. Once the date format conversion happens, make the API call.\n\tformatDate = (dateObject) => {\n\t\tlet year = dateObject.getFullYear();\n\t\tlet month = dateObject.getMonth() + 1;\n\t\tif (month < 10) {\n\t\t\tmonth = '0' + month;\n\t\t}\n\t\tlet day = dateObject.getDate();\n\t\tif (day < 10) {\n\t\t\tday = '0' + day;\n\t\t}\n\t\tlet hours = dateObject.getHours();\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tlet minutes = dateObject.getMinutes();\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\t//convert the date to format /YYYY-MM-DDTHH:mm:00\n\t\tlet dateString = `${year}-${month}-${day}T${hours}:${minutes}:00`;\n\t\t//go to the function that makes the API Call\n\t\treturn dateString\n\t}\n\t//make the API Call and pass in the date string {weatherName} first mentioned in the kickoff function.\n\tgetWeatherData = (date, weatherName) => {\n\t\tconsole.log(date);\n\t\taxios({\n\t\t\turl: `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/c369d6cf3852faec4a3db6128422f86a/${this.state.latt},${this.state.long},${date}?units=si`,\n\n\t\t}).then((response) => {\n\t\t\t//set state with the result from the API Response\n\t\t\tconsole.log(response.data)\n\t\t\tthis.setState({\n\t\t\t\t[weatherName]: response.data.currently,\n\t\t\t})\n\t\t\t//call the assignStates function to make state assignments.\n\t\t\tthis.assignStates(weatherName);\n\t\t\tif (this.refToWeather.current){\n\t\t\t\twindow.scrollTo(0, this.refToWeather.current.offsetTop);\n\t\t\t}\n\t\t})\n\t}\n\tgetCityCoordinate=(address) =>{\n\t\taxios({\n\t\t\turl:`https://nominatim.openstreetmap.org/search`,\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tq: address,\n\t\t\t\tformat:\"json\",\n\t\t\t\taddressdetails: 1,\n\t\t\t\tlimit: 1,\n\t\t\t}\n\t\t}).then((response)=>{\n\t\t\tthis.setState({\n\t\t\t\tlatt: response.data[0].lat,\n\t\t\t\tlong: response.data[0].lon\n\t\t\t})\n\t\t\tthis.getWeatherData(this.state.formattedTime1, \"weatherData1\")\n\t\t\tthis.getWeatherData(this.state.formattedTime2, \"weatherData2\")\n\t\t}).catch((error)=>{\n\t\t\tthis.setState({\n\t\t\t\terror: error.message\n\t\t\t})\n\t\t})\n\t}\n\tgetCityNameFromCoordinates = (latt,long) => {\n\t\taxios({\n\t\t\turl: `https://nominatim.openstreetmap.org/reverse?`,\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tlat: latt,\n\t\t\t\tlon: long,\n\t\t\t\tformat: \"json\",\n\t\t\t\taddressdetails: 1,\n\t\t\t\tlimit: 1,\n\t\t\t}\n\t\t}).then((response) => {\n\t\t\tlet city=response.data.address.city;\n\t\t\tthis.setState({\n\t\t\t\tlocationName: city,\n\t\t\t})\n\t\t}).catch((error)=>{\n\t\t\tthis.setState({\n\t\t\t\terror: error.message\n\t\t\t})\n\t\t})\n\t}\n\n\t//this function takes the properties inside the object created by the API call and assigns them to another object called parsed+weatherName\"\\\n\tassignStates = (weatherName) => {\n\t\t//create an object called parsed + weathername to store the parsed data.\n\t\tconst objectName = `parsed` + weatherName;\n\t\t//create an object called new Data with properties assigned to the states.\t\n\t\tconst newData = {\n\t\t\thumidity: \t\t\tthis.state[weatherName].humidity,\n\t\t\ticon: \t\t\t\tthis.state[weatherName].icon,\n\t\t\tprecipIntensity: \tthis.state[weatherName].precipIntensity,\n\t\t\tprecipProbability: \tthis.state[weatherName].precipProbability,\n\t\t\tsummary: \t\t\tthis.state[weatherName].summary,\n\t\t\ttemperature: \t\tthis.state[weatherName].temperature,\n\t\t\tapparentTemp: \t\tthis.state[weatherName].apparentTemperature,\n\t\t\twindSpeed: \t\t\tthis.state[weatherName].windSpeed,\n\t\t\tserverTime: \t\tthis.readableDate(this.state[weatherName].time),\n\t\t};\n\t\t//assign the newData as an object to [objectName] \n\t\tthis.setState({\n\t\t\t[objectName] : newData,\n\t\t})\n\t}\n\t//if the status shown is \"rain\" but the precipitation intensity is less than 0.4 mm/hr tell the user that is very little rain\n\tdisplayRainMessage = () => {\n\t\tif ((this.state.weatherData1.icon === \"rain\" || this.state.weatherData1.icon===\"rain\")&&(this.state.weatherData1.precipIntensity !== 0 && this.state.weatherData1.precipIntensity <= 0.4) &&\n\t\t(this.state.weatherData2.precipIntensity !== 0 && this.state.weatherData2.precipIntensity < 0.4)){\n\t\t\treturn <p className=\"wrapper message\">{`${Math.round(Math.max(this.state.weatherData1.precipIntensity, this.state.weatherData2.precipIntensity)*100)/100} mm/hr is really not a lot of rain you can still bike!`}</p>\n\t\t}\n\t}\n\t//convert unix time that comes back from the server to human readable time. \n\treadableDate = (unixTime) => {\n\t\tlet months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\t\tlet date = new Date(unixTime * 1000);\n\n\t\tlet month = months[date.getMonth()];\n\t\tlet day = date.getDate();\n\t\tlet suffix;\n\t\tif (day.toString().endsWith('11', 2)) {\n\t\t\tsuffix = 'th';\n\t\t}\n\t\telse if (day.toString().endsWith('1', 1)){\n\t\t\tsuffix = 'st';\n\t\t}\n\t\telse if (day.toString().endsWith('2', 1)) {\n\t\t\tsuffix = 'nd';\n\t\t}\n\t\telse if (day.toString().endsWith('3', 1)) {\n\t\t\tsuffix = 'rd';\n\t\t}\n\t\telse{\n\t\t\tsuffix = 'th';\n\t\t}\n\t\t// Hours part from the timestamp\n\t\tlet hours = date.getHours();\n\t\t// Minutes part from the timestamp\n\t\tlet minutes = \"0\" + date.getMinutes();\n\t\t// Seconds part from the timestamp\n\n\t\t// Will display time in 10:30:23 format\n\t\tlet formattedTime = `${month} ${day}${suffix}, ${hours}:${minutes.substr(-2)}`;\n\t\treturn formattedTime;\n\t} \n\tgetLocationInfo = (position) => {\n\t\tthis.setState({\n\t\t\tlong: position.coords.longitude,\n\t\t\tlatt: position.coords.latitude\n\t\t})\n\t\tthis.getCityNameFromCoordinates(this.state.latt, this.state.long)\n\t}\n\tcomponentDidMount(){\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(this.getLocationInfo);\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\" >\n\t\t\t\t<Header \n\t\t\t\t\ttime1={this.state.time1}\n\t\t\t\t\ttime2={this.state.time2}\n\t\t\t\t\thandleChange1={this.handleChange1}\n\t\t\t\t\thandleChange2={this.handleChange2}\n\t\t\t\t\thandleLocation={this.handleLocation}\n\t\t\t\t\tkickOff={this.kickOff} \n\t\t\t\t\tlocationName={this.state.locationName}\n\t\t\t\t\tlatt={this.state.latt}\n\t\t\t\t\tlong={this.state.long}\n\t\t\t\t/>\n\t\t\t\t{/* if weatherData1 and weatherData2 are defined, render main, else render nothing */}\n\t\t\t\t{this.state.weatherData1 && this.state.weatherData2 ? \n\t\t\t\t<main ref={this.refToWeather}>\n\t\t\t\t\t<div className=\"weatherResults wrapper\">\n\t\t\t\t\t\t\t<DisplayWeather\n\t\t\t\t\t\t\t\thumidity=\t\t\t{this.state.parsedweatherData1.humidity}\n\t\t\t\t\t\t\t\ticon=\t\t\t\t{this.state.parsedweatherData1.icon}\n\t\t\t\t\t\t\t\tprecipIntensity=\t{this.state.parsedweatherData1.precipIntensity}\n\t\t\t\t\t\t\t\tprecipProbability=\t{this.state.parsedweatherData1.precipProbability}\n\t\t\t\t\t\t\t\tsummary=\t\t\t{this.state.parsedweatherData1.summary}\n\t\t\t\t\t\t\t\ttemperature=\t\t{this.state.parsedweatherData1.temperature}\n\t\t\t\t\t\t\t\tapparentTemp=\t\t{this.state.parsedweatherData1.apparentTemp}\n\t\t\t\t\t\t\t\twindSpeed=\t\t\t{this.state.parsedweatherData1.windSpeed}\n\t\t\t\t\t\t\t\ttime=\t\t\t\t{this.state.time1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<DisplayWeather\n\t\t\t\t\t\t\t\thumidity=\t\t\t{this.state.parsedweatherData2.humidity}\n\t\t\t\t\t\t\t\ticon=\t\t\t\t{this.state.parsedweatherData2.icon}\n\t\t\t\t\t\t\t\tprecipIntensity=\t{this.state.parsedweatherData2.precipIntensity}\n\t\t\t\t\t\t\t\tprecipProbability=\t{this.state.parsedweatherData2.precipProbability}\n\t\t\t\t\t\t\t\tsummary=\t\t\t{this.state.parsedweatherData2.summary}\n\t\t\t\t\t\t\t\ttemperature=\t\t{this.state.parsedweatherData2.temperature}\n\t\t\t\t\t\t\t\tapparentTemp=\t\t{this.state.parsedweatherData2.apparentTemp}\n\t\t\t\t\t\t\t\twindSpeed=\t\t\t{this.state.parsedweatherData2.windSpeed}\n\t\t\t\t\t\t\t\ttime=\t\t\t\t{this.state.time2}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.displayRainMessage()}\n\t\t\t\t\t<div className=\"buttonContainer\">\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tonClick={()=>{window.location.reload()}}\n\t\t\t\t\t\t\tclassName=\"greenButton\">Refresh\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t:''}\n\t\t\t\t<Footer/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}
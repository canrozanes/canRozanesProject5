{"version":3,"sources":["Header.js","DisplayWeather.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","todayOffset","offset","dateObject","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","concat","react_default","a","createElement","className","action","htmlFor","type","id","placeholder","value","this","props","locationName","onChange","handleLocation","entry_default","handleChange1","time1","format","maxDate","minDate","required","handleChange2","time2","onClick","kickOff","Component","DisplayWeather","getTimefromDate","dateTime","time","src","icon","alt","summary","Math","round","temperature","apparentTemp","precipProbability","precipIntensity","humidity","windSpeed","Footer","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todaysDate","setState","event","target","e","preventDefault","formattedTime1","formatDate","state","formattedTime2","getCityCoordinate","getWeatherData","date","weatherName","console","log","axios","url","latt","long","then","response","data","defineProperty","currently","assignStates","refToWeather","current","window","scrollTo","offsetTop","address","method","params","q","addressdetails","limit","lat","lon","getCityNameFromCoordinates","city","objectName","newData","apparentTemperature","serverTime","readableDate","displayRainMessage","weatherData1","weatherData2","max","unixTime","suffix","toString","endsWith","substr","getLocationInfo","position","coords","longitude","latitude","React","createRef","parsedweatherData1","parsedweatherData2","counter","navigator","geolocation","getCurrentPosition","src_Header","ref","src_DisplayWeather","location","reload","src_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c49db0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DateTimePicker from 'react-datetime-picker';\n\nclass Header extends Component {\n\n    //add or subtract days from today to use on maxDate and minDate props of DateTimePicker component.\n    todayOffset = (offset) => {\n        //create a new weather object with todays date\n        let dateObject = new Date();\n        let year = dateObject.getFullYear();\n        let month = dateObject.getMonth() + 1;\n        if (month < 10) {\n            month = '0' + month;\n        }\n        //let the output day be today's date + offset \n        let day = dateObject.getDate() + offset;\n        if (day < 10) {\n            day = '0' + day;\n        }\n        let hours = dateObject.getHours();\n        if (hours < 10) {\n            hours = '0' + hours;\n        }\n        let minutes = dateObject.getMinutes();\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        return new Date(`${year}-${month}-${day}T00:00:00`);\n    }\n    render() {\n        return (\n            <div className=\"header\">\n                <div className=\"wrapper formBox\">\n                    <h1>Commuter.Weather</h1>\n                    <p>Tell us when your commute is, we'll tell you how the weather will be.</p>\n                    <form action=\"\">\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"location\">City:</label>\n                            <input \n                            className = \"textInput\"\n                            type=\"text\" \n                            id=\"location\"\n                            placeholder={\"enter city name\"}\n                            value={this.props.locationName}\n                            onChange={this.props.handleLocation}\n                            />\n                        </div>\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"time1\">Commute to Work Start Time:</label>\n                            <DateTimePicker\n                                className=\"datePicker\"\n                                onChange={this.props.handleChange1}\n                                value={this.props.time1}\n                                format=\"y-MM-dd HH:mm\"\n                                // make sure user can only select yesterday to a week out\n                                maxDate={this.todayOffset(7)}\n                                minDate={this.todayOffset(-1)}\n                                required={true}\n                            />\n                        </div>\n                        <div className=\"formInput\">\n                            <label className=\"bold\" htmlFor=\"time2\">Commute to Home Start Time:</label>\n                            <DateTimePicker\n                                className=\"datePicker\"\n                                onChange={this.props.handleChange2}\n                                value={this.props.time2}\n                                format=\"y-MM-dd HH:mm\"\n                                // make sure user can only select yesterday to a week out\n                                maxDate={this.todayOffset(7)}\n                                minDate={this.todayOffset(-1)}\n                                required={true}\n                            />\n                        </div>\n                        {/* error handling: check if the user has values for both dates */}\n                        <button onClick={(this.props.time1 && this.props.time1) ? this.props.kickOff : \"\"}\n                            className=\"greenButton\"\n                        >Display Weather\n                        </button>\n                    </form>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass DisplayWeather extends Component {\n    getTimefromDate = (dateTime) => {\n        let hours = dateTime.getHours();\n        if (hours < 10) {\n            hours = '0' + hours;\n        }\n        let minutes = dateTime.getMinutes();\n        if (minutes < 10) {\n            minutes = '0' + minutes;\n        }\n        let timeString = `${hours}:${minutes}`;\n        return timeString\n    }\n    \n\n    render(){\n        return(\n            <div className=\"weatherResult\">\n                <h2>Weather forecast for <span className=\"bold\">{this.getTimefromDate(this.props.time)}</span></h2>\n                <div className=\"weatherData\">\n                    <div className=\"importantData\">\n                        <div className=\"iconContainer\">\n                            <img src={`./assets/weatherIcons/${this.props.icon}.svg`} alt={`${this.props.icon} icon`}/>\n                        </div>\n                        <h3>{this.props.summary}</h3>\n                        <div className=\"temperature\">\n                        <h3>{Math.round(this.props.temperature)} {'\\u00b0'} C</h3>\n                        </div>\n                    </div>\n                    <div className=\"extraData\">\n                        <div className=\"apparentTemp numberItem\">\n                            <h4>Feels like:</h4>\n                            <p>{Math.round(this.props.apparentTemp)} {'\\u00b0'} C</p>\n                        </div>\n                        <div className=\"precipProbability numberItem\">\n                            <h4>Chance of Precipitation: </h4>\n                            <p>{`${Math.round(this.props.precipProbability*100)}%`}</p>\n                        </div>\n                        <div className=\"precipIntensity numberItem\">\n                            <h4>Precipitation: </h4>\n                            <p>{`${Math.round(this.props.precipIntensity*100)/100} mm/hr`}</p>\n                        </div>\n                        <div className=\"humidity numberItem\">\n                            <h4>Humiditiy:</h4>\n                            <p>{`${Math.round(this.props.humidity * 100)} %`}</p>\n                        </div>\n                        <div className=\"windSpeed numberItem\">\n                            <h4>Wind:</h4>\n                            <p>{`${Math.round(this.props.windSpeed * 3600/1000)} km/hr`}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DisplayWeather;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer>\n                <div className=\"wrapper\">\n                    <a href=\"https://darksky.net/poweredby/\"> Powered by Dark Sky API </a>\n                    <p> Built by Can Rozanes </p>\n                    <a href=\"https://www.iconfinder.com/iconsets/weather-color-2\"> Weather Icons by Yun Liu</a>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from './Header.js';\nimport DisplayWeather from './DisplayWeather.js';\nimport Footer from './Footer.js'\n\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t//create a reference to the weatherData component for automatic scrolling\n\t\tthis.refToWeather = React.createRef();\n\t\tthis.state = {\n\t\t\ttime1: this.todaysDate(),\n\t\t\ttime2: this.todaysDate(),\n\t\t\tformattedTime1: \"\",\n\t\t\tformattedTime2: \"\",\n\t\t\tparsedweatherData1: {},\n\t\t\tparsedweatherData2: {},\n\t\t\tlocationName: \"\",\n\t\t\tcounter: 0,\n\t\t\tlatt: \"\",\n\t\t\tlong: \"\",\n\t\t\trefToWeather: \"\"\n\t\t}\n\t}\n\t//take todays date reformated it and create a new date object to set the initial state of time1 and time2 states to be nice round datetimes. \n\ttodaysDate = () => {\n\t\tlet dateObject = new Date();\n\t\tlet year = dateObject.getFullYear();\n\t\tlet month = dateObject.getMonth() + 1;\n\t\tif (month < 10) {\n\t\t\tmonth = '0' + month;\n\t\t}\n\t\tlet day = dateObject.getDate();\n\t\tif (day < 10) {\n\t\t\tday = '0' + day;\n\t\t}\n\t\tlet hours = dateObject.getHours();\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tlet minutes = dateObject.getMinutes();\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\treturn new Date(`${year}-${month}-${day}T${hours}:00:00`);\n\t}\n\t//handle change for the first dateTime picker\n\thandleChange1 = (time) => {\n\t\tthis.setState({ time1: time })\n\t}\n\t//handle change for the second dateTime picker\n\thandleChange2 = (time) => {\n\t\tthis.setState({ time2: time })\n\t}\n\thandleLocation = (event) =>{\n\t\tthis.setState({\n\t\t\tlocationName: event.target.value,\n\t\t})\n\t\t\n\t}\n\t//when user presses the \"Display Weather\" button, call the formatDate function with \"weatherData1\" and \"weatherData2\" strings.\n\tkickOff = (e) => {\n\t\t//prevent default behaviour of the button\n\t\te.preventDefault();\n\t\t//call format date for two different dates. Also pass in strings that will eventually be the name of the objects that will store the results of the each API call.\n\t\tthis.setState({\n\t\t\tformattedTime1 : this.formatDate(this.state.time1),\n\t\t\tformattedTime2 : this.formatDate(this.state.time2),\n\t\t})\n\t\tthis.getCityCoordinate(this.state.locationName);\n\t}\n\t//format the date from a date object to a string format that is accepted by the API. Once the date format conversion happens, make the API call.\n\tformatDate = (dateObject) => {\n\t\tlet year = dateObject.getFullYear();\n\t\tlet month = dateObject.getMonth() + 1;\n\t\tif (month < 10) {\n\t\t\tmonth = '0' + month;\n\t\t}\n\t\tlet day = dateObject.getDate();\n\t\tif (day < 10) {\n\t\t\tday = '0' + day;\n\t\t}\n\t\tlet hours = dateObject.getHours();\n\t\tif (hours < 10) {\n\t\t\thours = '0' + hours;\n\t\t}\n\t\tlet minutes = dateObject.getMinutes();\n\t\tif (minutes < 10) {\n\t\t\tminutes = '0' + minutes;\n\t\t}\n\t\t//convert the date to format /YYYY-MM-DDTHH:mm:00\n\t\tlet dateString = `${year}-${month}-${day}T${hours}:${minutes}:00`;\n\t\t//go to the function that makes the API Call\n\t\treturn dateString\n\t}\n\t//make the API Call and pass in the date string {weatherName} first mentioned in the kickoff function.\n\tgetWeatherData = (date, weatherName) => {\n\t\tconsole.log(date);\n\t\taxios({\n\t\t\turl: `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/c369d6cf3852faec4a3db6128422f86a/${this.state.latt},${this.state.long},${date}?units=si`,\n\n\t\t}).then((response) => {\n\t\t\t//set state with the result from the API Response\n\t\t\tconsole.log(response.data)\n\t\t\tthis.setState({\n\t\t\t\t[weatherName]: response.data.currently,\n\t\t\t})\n\t\t\t//call the assignStates function to make state assignments.\n\t\t\tthis.assignStates(weatherName);\n\t\t\tif (this.refToWeather.current){\n\t\t\t\twindow.scrollTo(0, this.refToWeather.current.offsetTop);\n\t\t\t}\n\t\t})\n\t}\n\tgetCityCoordinate=(address) =>{\n\t\taxios({\n\t\t\turl:`https://nominatim.openstreetmap.org/search`,\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tq: address,\n\t\t\t\tformat:\"json\",\n\t\t\t\taddressdetails: 1,\n\t\t\t\tlimit: 1,\n\t\t\t}\n\t\t}).then((response)=>{\n\t\t\tthis.setState({\n\t\t\t\tlatt: response.data[0].lat,\n\t\t\t\tlong: response.data[0].lon\n\t\t\t})\n\t\t\tthis.getWeatherData(this.state.formattedTime1, \"weatherData1\")\n\t\t\tthis.getWeatherData(this.state.formattedTime2, \"weatherData2\")\n\t\t})\n\t}\n\tgetCityNameFromCoordinates = (latt,long) => {\n\t\taxios({\n\t\t\turl: `https://nominatim.openstreetmap.org/reverse?`,\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\tlat: latt,\n\t\t\t\tlon: long,\n\t\t\t\tformat: \"json\",\n\t\t\t\taddressdetails: 1,\n\t\t\t\tlimit: 1,\n\t\t\t}\n\t\t}).then((response) => {\n\t\t\tlet city=response.data.address.city;\n\t\t\tthis.setState({\n\t\t\t\tlocationName: city,\n\t\t\t})\n\t\t})\n\t}\n\n\t//this function takes the properties inside the object created by the API call and assigns them to another object called parsed+weatherName\"\\\n\tassignStates = (weatherName) => {\n\t\t//create an object called parsed + weathername to store the parsed data.\n\t\tconst objectName = `parsed` + weatherName;\n\t\t//create an object called new Data with properties assigned to the states.\t\n\t\tconst newData = {\n\t\t\thumidity: \t\t\tthis.state[weatherName].humidity,\n\t\t\ticon: \t\t\t\tthis.state[weatherName].icon,\n\t\t\tprecipIntensity: \tthis.state[weatherName].precipIntensity,\n\t\t\tprecipProbability: \tthis.state[weatherName].precipProbability,\n\t\t\tsummary: \t\t\tthis.state[weatherName].summary,\n\t\t\ttemperature: \t\tthis.state[weatherName].temperature,\n\t\t\tapparentTemp: \t\tthis.state[weatherName].apparentTemperature,\n\t\t\twindSpeed: \t\t\tthis.state[weatherName].windSpeed,\n\t\t\tserverTime: \t\tthis.readableDate(this.state[weatherName].time),\n\t\t};\n\t\t//assign the newData as an object to [objectName] \n\t\tthis.setState({\n\t\t\t[objectName] : newData,\n\t\t})\n\t}\n\t//if the status shown is \"rain\" but the precipitation intensity is less than 0.4 mm/hr tell the user that is very little rain\n\tdisplayRainMessage = () => {\n\t\tif ((this.state.weatherData1.icon === \"rain\" || this.state.weatherData1.icon===\"rain\")&&(this.state.weatherData1.precipIntensity !== 0 && this.state.weatherData1.precipIntensity <= 0.4) &&\n\t\t(this.state.weatherData2.precipIntensity !== 0 && this.state.weatherData2.precipIntensity < 0.4)){\n\t\t\treturn <p className=\"wrapper message\">{`${Math.round(Math.max(this.state.weatherData1.precipIntensity, this.state.weatherData2.precipIntensity)*100)/100} mm/hr is really not a lot of rain you can still bike!`}</p>\n\t\t}\n\t}\n\t//convert unix time that comes back from the server to human readable time. \n\treadableDate = (unixTime) => {\n\t\tlet months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\t\tlet date = new Date(unixTime * 1000);\n\n\t\tlet month = months[date.getMonth()];\n\t\tlet day = date.getDate();\n\t\tlet suffix;\n\t\tif (day.toString().endsWith('11', 2)) {\n\t\t\tsuffix = 'th';\n\t\t}\n\t\telse if (day.toString().endsWith('1', 1)){\n\t\t\tsuffix = 'st';\n\t\t}\n\t\telse if (day.toString().endsWith('2', 1)) {\n\t\t\tsuffix = 'nd';\n\t\t}\n\t\telse if (day.toString().endsWith('3', 1)) {\n\t\t\tsuffix = 'rd';\n\t\t}\n\t\telse{\n\t\t\tsuffix = 'th';\n\t\t}\n\t\t// Hours part from the timestamp\n\t\tlet hours = date.getHours();\n\t\t// Minutes part from the timestamp\n\t\tlet minutes = \"0\" + date.getMinutes();\n\t\t// Seconds part from the timestamp\n\n\t\t// Will display time in 10:30:23 format\n\t\tlet formattedTime = `${month} ${day}${suffix}, ${hours}:${minutes.substr(-2)}`;\n\t\treturn formattedTime;\n\t} \n\tgetLocationInfo = (position) => {\n\t\tthis.setState({\n\t\t\tlong: position.coords.longitude,\n\t\t\tlatt: position.coords.latitude\n\t\t})\n\t\tthis.getCityNameFromCoordinates(this.state.latt, this.state.long)\n\t}\n\tcomponentDidMount(){\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition(this.getLocationInfo);\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\" >\n\t\t\t\t<Header \n\t\t\t\t\ttime1={this.state.time1}\n\t\t\t\t\ttime2={this.state.time2}\n\t\t\t\t\thandleChange1={this.handleChange1}\n\t\t\t\t\thandleChange2={this.handleChange2}\n\t\t\t\t\thandleLocation={this.handleLocation}\n\t\t\t\t\tkickOff={this.kickOff} \n\t\t\t\t\tlocationName={this.state.locationName}\n\t\t\t\t\tlatt={this.state.latt}\n\t\t\t\t\tlong={this.state.long}\n\t\t\t\t/>\n\t\t\t\t{/* if weatherData1 and weatherData2 are defined, render main, else render nothing */}\n\t\t\t\t{this.state.weatherData1 && this.state.weatherData2 ? \n\t\t\t\t<main ref={this.refToWeather}>\n\t\t\t\t\t<div className=\"weatherResults wrapper\">\n\t\t\t\t\t\t\t<DisplayWeather\n\t\t\t\t\t\t\t\thumidity=\t\t\t{this.state.parsedweatherData1.humidity}\n\t\t\t\t\t\t\t\ticon=\t\t\t\t{this.state.parsedweatherData1.icon}\n\t\t\t\t\t\t\t\tprecipIntensity=\t{this.state.parsedweatherData1.precipIntensity}\n\t\t\t\t\t\t\t\tprecipProbability=\t{this.state.parsedweatherData1.precipProbability}\n\t\t\t\t\t\t\t\tsummary=\t\t\t{this.state.parsedweatherData1.summary}\n\t\t\t\t\t\t\t\ttemperature=\t\t{this.state.parsedweatherData1.temperature}\n\t\t\t\t\t\t\t\tapparentTemp=\t\t{this.state.parsedweatherData1.apparentTemp}\n\t\t\t\t\t\t\t\twindSpeed=\t\t\t{this.state.parsedweatherData1.windSpeed}\n\t\t\t\t\t\t\t\ttime=\t\t\t\t{this.state.time1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<DisplayWeather\n\t\t\t\t\t\t\t\thumidity=\t\t\t{this.state.parsedweatherData2.humidity}\n\t\t\t\t\t\t\t\ticon=\t\t\t\t{this.state.parsedweatherData2.icon}\n\t\t\t\t\t\t\t\tprecipIntensity=\t{this.state.parsedweatherData2.precipIntensity}\n\t\t\t\t\t\t\t\tprecipProbability=\t{this.state.parsedweatherData2.precipProbability}\n\t\t\t\t\t\t\t\tsummary=\t\t\t{this.state.parsedweatherData2.summary}\n\t\t\t\t\t\t\t\ttemperature=\t\t{this.state.parsedweatherData2.temperature}\n\t\t\t\t\t\t\t\tapparentTemp=\t\t{this.state.parsedweatherData2.apparentTemp}\n\t\t\t\t\t\t\t\twindSpeed=\t\t\t{this.state.parsedweatherData2.windSpeed}\n\t\t\t\t\t\t\t\ttime=\t\t\t\t{this.state.time2}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.displayRainMessage()}\n\t\t\t\t\t<div className=\"buttonContainer\">\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tonClick={()=>{window.location.reload()}}\n\t\t\t\t\t\t\tclassName=\"greenButton\">Refresh\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t:''}\n\t\t\t\t<Footer/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}